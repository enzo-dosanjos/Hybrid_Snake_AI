/*************************************************************************
Minimax - Implementation of a minimax algorithm with alpha-beta prunning
                             -------------------
    copyright            : (C) 2025 by Enzo DOS ANJOS
*************************************************************************/

//---------- Interface of the module <Minimax> (file Minimax.h) ----------
#ifndef MINIMAX_H
#define MINIMAX_H

//------------------------------------------------------------------------
// Role of the <Minimax> module
// Implementation of a minimax algorithm with alpha-beta prunning
// that uses a reward function to evaluate the game state.
//------------------------------------------------------------------------

//-------------------------------------------------------- Used interfaces
#include "../include/Structs.h"
#include "../include/Utils.h"
#include "../include/SpaceRiskAnalyzer.h"

//------------------------------------------------------------------ Types
// used to find the best optimised parameters
namespace std {
    template<> struct hash<GameConfig> {
        size_t operator()(const GameConfig& c) const {
            return hash<int>()(c.W) ^ hash<int>()(c.H) ^ hash<int>()(c.M);
        }
    };
}


// Reward configuration
struct Rewards {
    double selfSpace = 2.72685;  // default values in case the file cannot be read
    double oppSpace = 0.36796;

    double selfBlockRisk = -11.63637;
    double oppBlockRisk = -11.55511;

    double selfHeatRisk = -0.39336;
    double oppHeatRisk = -2.62494;

    double snakeLength = 1.66086;  // reward increase the more the player survives
};


struct MinimaxParams {
    Rewards rewards;
    int depth = 8;
};


//----------------------------------------------------------------- PUBLIC
class Minimax
{
//--------------------------------------------------------- Public Methods
    public:
        std::unordered_map<std::string, float> calculateMoveScores(
        	std::vector<float> &boardState,
            PlayersData &playerState,
            int turn
        );
        // Usage :
        //
        // Contract :
        //

        void updateRewards(
                const MinimaxParams &newParams
        );
        // Usage :
        //
        // Contract :
        //

        void updateRewards(
            float selfSpace,
            float oppSpace,
            float selfBlockRisk,
            float oppBlockRisk,
            float selfHeatRisk,
            float oppHeatRisk,
            float snakeLength,
            int depth
        );
        // Usage :
        //
        // Contract :
        //

        MinimaxParams findClosestConfig(
            const string &filename
        );
        // Usage :
        //
        // Contract :
        //

        Minimax(
            int w,
            int h,
            int m,
            int n,
            int p,
            int boardC,
            int spaceRiskAnalyzerLookahead = 5,
            float spaceRiskAnalyzerDecay = 0.7
        ) : W(w),
            H(h),
            M(m),
            N(n),
            P(p),
            nbBoardChannels(boardC),
            helper(w, h, m, n, p, boardC),
            analyzer(w, h, m, n, p, boardC, spaceRiskAnalyzerLookahead, spaceRiskAnalyzerDecay)
        {
            #ifdef MAP
                        cout << "Calling the constructor of Minimax" << endl;
            #endif
        }


    protected:
        MinimaxParams loadParameters(
            const string& config,
            ifstream &file,
            streampos filePos = 0
        );
        // Usage :
        //
        // Contract :
        //

        void parseParameters(
            const std::string &line,
            MinimaxParams& params
        );
        // Usage :
        //
        // Contract :
        //

    	std::pair<std::vector<float>, PlayersData> simulateMove(
        	const std::string &move,
            const std::vector<float> &boardState,
            const PlayersData &playerState,
            int turn,
            int playerNb
        );
        // Usage :
        //
        // Contract :
        //

        float evaluateState(
            const PlayersData &playerState,
            int currentPlayer
        );
        // Usage :
        //
        // Contract :
        //

        float alphabeta(
            const std::vector<float> &boardState,
            PlayersData playerState,
            int depth,
            float alpha,
            float beta,
            int currentPlayer,
            int turn
        );
        // Usage :
        //
        // Contract :
        //


    private:
        int W, H, M, N, P;
        int nbBoardChannels;

        MinimaxParams params;

        Utils helper;
        SpaceRiskAnalyzer analyzer;

        /*// Pre-optimized configurations
        const unordered_map<GameConfig, Mini> OPTIMIZED_CONFIGS = {
            {{5,5,3}, {
                {0.10543,1.85589,-18.89066,-7.87514,-2.58396,-3.84233,1.40004,10},
                {1.25336,5.62555,-7.12253,-25.49483,-2.00368,-3.73670,3.06202,10}
            }},
            {{5,5,5}, {
                {9.86304,0.71365,-0.54071,-19.65287,-4.24185,-3.24566,3.42132,10},
                {8.51932,4.87792,-2.20572,-11.09974,-2.20937,-0.40613,4.10528,10}
            }},
            {{5,10,1}, {
                {4.95812,0.58400,-8.16223,-9.89725,-2.51695,-0.15421,3.90849,10},
                {3.80743,5.18950,-21.25147,-19.61678,-4.80156,-3.62037,3.11349,10}
            }},
            {{10,5,1}, {
                {1.96037,1.22310,-6.93331,-15.21622,-4.81081,-1.24039,0.63328,10},
                {5.43343,4.92319,-10.51806,-15.69086,-0.50375,-2.19761,4.48548,10}
            }},
            {{5,10,3}, {
                {7.11629,5.73217,-10.85131,-2.30759,-3.28122,-0.08805,0.05312,10},
                {3.54783,7.32287,-21.80062,-14.25961,-2.22407,-2.12458,1.58159,10}
            }},
            {{10,5,3}, {
                {4.93732,5.55846,-26.11362,-0.98468,-1.78709,-0.39818,3.78978,10},
                {4.59492,1.58878,-28.51300,-16.30666,-0.45573,-2.79874,3.77850,10}
            }},
            {{10,10,1}, {
                {6.60364,5.73107,-1.04037,-8.43953,-1.78166,-0.31617,2.88385,10},
                {5.67002,0.11459,-23.13957,-0.49847,-1.07319,-4.44928,2.76642,10}
            }},
            {{5,10,5}, {
                {2.72685,0.36796,-11.63637,-11.55511,-0.39336,-2.62494,1.66086,10},
                {3.64801,5.44827,-14.05914,-8.78854,-4.31201,-2.54387,2.54999,10}
            }},
            {{5,15,1}, {
                {6.96267,4.74672,-3.51172,-29.42298,-2.03244,-3.11455,4.15341,10},
                {0.34471,8.54209,-24.11503,-7.99109,-2.63700,-4.49725,0.01350,10}
            }},
            {{5,15,3}, {
                {0.38794,0.34867,-16.92641,-20.65476,-0.94491,-3.15767,2.86520,10},
                {0.14270,6.36858,-22.68650,-10.23557,-0.51873,-1.97959,3.35001,10}
            }},
            {{5,15,5}, {
                {2.49323,2.10021,-26.30210,-21.31888,-1.80693,-4.99383,2.86825,10},
                {7.76899,1.91613,-5.12857,-8.84974,-1.42311,-1.58985,0.81438,10}
            }},
            {{20,20,1}, {
                {0.60147,3.85191,-16.92186,-22.70909,-0.73932,-1.67101,1.13302,10},
                {1.26617,0.72061,-18.68085,-14.31583,-4.88909,-0.97957,0.20723,10}
            }},
            {{20,20,3}, {
                {9.51240,1.99888,-2.45718,-28.56472,-3.56817,-4.79633,3.90470,10},
                {1.72461,8.81979,-24.45410,-15.04801,-2.70671,-2.51993,3.68625,10}
            }},
            {{20,20,5}, {
                {6.57235,2.02789,-5.60290,-17.42158,-4.96738,-2.49493,3.76618,10},
                {3.52312,2.32791,-19.95493,-19.28304,-3.12448,-2.39243,0.58994,10}
            }},
            {{20,25,1}, {
                {0.02878,1.81518,-12.14124,-26.94068,-2.98266,-3.44184,4.95919,10},
                {4.27130,5.11527,-11.41713,-9.79292,-1.60153,-1.77650,0.44860,10}
            }},
            {{30,30,1}, {
                {1.55659,7.10800,-23.56205,-17.93410,-2.99088,-2.87369,4.57238,8},
                {9.59903,4.38862,-18.85970,-6.57227,-3.70542,-1.27268,0.25200,8}
            }},
            {{30,30,3}, {
                {0.89169,1.23836,-27.32057,-3.87230,-4.86906,-0.23304,0.74879,8},
                {0.49158,9.30268,-13.15731,-10.13718,-0.44694,-4.53820,2.02184,8}
            }},
            {{30,30,5}, {
                {7.07393,2.29870,-9.07382,-5.42735,-3.83857,-2.03484,3.38571,8},
                {5.42030,1.82146,-6.46255,-25.62984,-1.74609,-0.47596,1.82151,8}
            }},
            {{35,35,1}, {
                {8.43631,1.27822,-2.04892,-2.76905,-1.19194,-4.08421,2.59332,8},
                {3.14882,2.48643,-4.10607,-28.30163,-2.73519,-3.69220,0.26584,8}
            }},
            {{35,35,3}, {
                {9.43769,1.21224,-25.63561,-22.63691,-2.28406,-1.92852,3.27308,8},
                {1.50751,8.37245,-16.41325,-21.37656,-4.61593,-4.80640,1.48307,8}
            }},
            {{40,40,1}, {
                {3.85854,7.65420,-19.45740,-4.94860,-0.05582,-1.83388,0.05070,8},
                {9.50793,2.80122,-2.66375,-11.10006,-4.26006,-1.14284,1.68213,8}
            }},
            {{40,40,1}, {
                {1.12644,6.50437,-20.41531,-8.46535,-4.88427,-4.28339,1.16381,8},
                {8.77888,7.82978,-0.40438,-23.78671,-2.00761,-4.91103,3.69255,8}
            }},
            {{45,45,1}, {
                {4.45949,2.34311,-13.20509,-15.33215,-1.73149,-3.08157,1.36046,8},
                {6.94148,5.18805,-13.80856,-5.88366,-2.71665,-0.84991,1.65823,8}
            }},
            {{45,45,3}, {
                {5.05674,1.06952,-5.30192,-18.74725,-3.23079,-1.72841,4.04512,8},
                {9.96720,7.83191,-11.28443,-10.78353,-0.22302,-2.71087,2.38838,8}
            }},
            {{45,45,5}, {
                {6.38415,6.96606,-2.92440,-27.75292,-4.53158,-3.70320,0.68007,8},
                {0.73499,3.17869,-18.48652,-5.95232,-4.74370,-1.10075,4.12719,8}
            }},
            {{50,50,1}, {
                {8.93999,1.67046,-21.51667,-4.62148,-0.11405,-3.69447,4.72137,8},
                {6.36894,7.34703,-9.02605,-27.58782,-3.20409,-0.89649,0.47314,8}
            }},
            {{50,50,3}, {
                {8.56633,5.20063,-26.35066,-29.27664,-3.03968,-3.44907,3.11964,8},
                {1.63812,6.58970,-21.27131,-11.34558,-1.76750,-2.29517,4.92760,8}
            }},
            {{50,50,5}, {
                {3.42945,2.27926,-2.89302,-11.02639,-2.58170,-0.94519,3.46836,8},
                {7.19437,2.17197,-27.43587,-27.74560,-4.76575,-4.54861,0.16849,8}
            }}
        };*/
};

#endif //MINIMAX_H
